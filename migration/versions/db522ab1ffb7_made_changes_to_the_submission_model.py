"""made changes to the submission model

Revision ID: db522ab1ffb7
Revises: c67aceefcb10
Create Date: 2025-05-26 23:56:07.126575

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'db522ab1ffb7'
down_revision: Union[str, None] = 'c67aceefcb10'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('admins', schema=None) as batch_op:
        batch_op.add_column(sa.Column('position', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'))

    with op.batch_alter_table('admission_forms', schema=None) as batch_op:
        batch_op.add_column(sa.Column('processed_by_id', sa.Integer(), nullable=True))
        batch_op.create_foreign_key(None, 'admins', ['processed_by_id'], ['id'])

    # First add is_primary as nullable
    with op.batch_alter_table('parents', schema=None) as batch_op:
        batch_op.add_column(sa.Column('occupation', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('employer', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('is_primary', sa.Boolean(), nullable=True))
    
    # Set default value for existing rows
    op.execute("UPDATE parents SET is_primary = false WHERE is_primary IS NULL")
    
    # Now alter the column to be NOT NULL
    with op.batch_alter_table('parents', schema=None) as batch_op:
        batch_op.alter_column('is_primary', existing_type=sa.Boolean(), nullable=False)

    with op.batch_alter_table('students', schema=None) as batch_op:
        batch_op.add_column(sa.Column('section', sa.String(length=10), nullable=True))
        batch_op.add_column(sa.Column('graduation_date', sa.TIMESTAMP(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'))
        batch_op.alter_column('enrollment_number',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)

    with op.batch_alter_table('teachers', schema=None) as batch_op:
        batch_op.add_column(sa.Column('department', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('qualification', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('termination_date', sa.TIMESTAMP(timezone=True), nullable=True))
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'))

    # Create the enum type only if it doesn't exist
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'gender') THEN
                CREATE TYPE gender AS ENUM ('MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY');
            END IF;
        END
        $$;
    """)
    
    # Then add gender as nullable
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY', name='gender'), nullable=True))
    
    # Set default value for existing rows
    op.execute("UPDATE users SET gender = 'PREFER_NOT_TO_SAY' WHERE gender IS NULL")
    
    # Now alter the column to be NOT NULL
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('gender', existing_type=sa.Enum('MALE', 'FEMALE', 'OTHER', 'PREFER_NOT_TO_SAY', name='gender'), nullable=False)
        batch_op.add_column(sa.Column('alternate_contact', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('profile_picture', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('address', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('city', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('state', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('country', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('postal_code', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('is_verified', sa.Boolean(), nullable=False, server_default='false'))
        batch_op.add_column(sa.Column('last_login', sa.TIMESTAMP(timezone=True), nullable=True))
        batch_op.drop_column('role')

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('role', postgresql.ENUM('STUDENT', 'TEACHER', 'ADMIN', 'PARENT', name='role'), autoincrement=False, nullable=False))
        batch_op.drop_column('last_login')
        batch_op.drop_column('is_verified')
        batch_op.drop_column('postal_code')
        batch_op.drop_column('country')
        batch_op.drop_column('state')
        batch_op.drop_column('city')
        batch_op.drop_column('address')
        batch_op.drop_column('profile_picture')
        batch_op.drop_column('alternate_contact')
        batch_op.drop_column('gender')

    with op.batch_alter_table('teachers', schema=None) as batch_op:
        batch_op.drop_column('is_active')
        batch_op.drop_column('termination_date')
        batch_op.drop_column('qualification')
        batch_op.drop_column('department')

    with op.batch_alter_table('students', schema=None) as batch_op:
        batch_op.alter_column('enrollment_number',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
        batch_op.drop_column('is_active')
        batch_op.drop_column('graduation_date')
        batch_op.drop_column('section')

    with op.batch_alter_table('parents', schema=None) as batch_op:
        batch_op.drop_column('is_primary')
        batch_op.drop_column('employer')
        batch_op.drop_column('occupation')

    with op.batch_alter_table('admission_forms', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('processed_by_id')

    with op.batch_alter_table('admins', schema=None) as batch_op:
        batch_op.drop_column('is_active')
        batch_op.drop_column('position')

    # Drop the gender enum type only if it exists and no columns are using it
    op.execute("""
        DO $$
        BEGIN
            IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'gender') THEN
                DROP TYPE gender;
            END IF;
        END
        $$;
    """)

    # ### end Alembic commands ###